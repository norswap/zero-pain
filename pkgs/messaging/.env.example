# This file can be imported into makefiles or shells to set deployment variables.

export RPC_LOCAL=http://localhost:8545
export RPC_TEST=https://rpc.testnet.happy.tech/http
export RPC_MAIN=https://eth.llamarpc.com

####################################################################################################
# APIs
####################################################################################################

# Automatically picked up by Foundry when deploying to verify contracts.
ETHERSCAN_API_KEY=<your-etherscan-api-key>

# Whether to automatically verify the contracts.
VERIFY_LOCAL=false
VERIFY_TEST=true
VERIFY_MAIN=true

# Verifier configuration for each environment
# NOTE: don't include quotes here, or it will break the makefile commands.
VERIFIER_FLAG_LOCAL=
VERIFIER_FLAG_TEST=--verifier blockscout
VERIFIER_FLAG_MAIN=

VERIFIER_URL_LOCAL=
VERIFIER_URL_TEST=--verifier-url https://explorer.testnet.happy.tech/api
VERIFIER_URL_MAIN=

# Whether to append metadata to bytecode
APPEND_METADATA_LOCAL=false
APPEND_METADATA_TEST=true
APPEND_METADATA_MAIN=true

####################################################################################################
# Private Keys
####################################################################################################

# (Using test account 0 private key - safe to make public.)

export PRIVATE_KEY_LOCAL=0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80

# Don't use these!!! Use Foundry's account feature (see below), which avoids writing down private
# keys, avoiding all risk of them leaking.

# export PRIVATE_KEY_TEST=0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80
# export PRIVATE_KEY_MAIN=0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80

####################################################################################################
# Foundry Accounts
####################################################################################################

# Foundry accounts avoid having private keys sitting in plaintext on your machine.

# To enable Foundry Accounts, set this variable to true:
export USE_FOUNDRY_ACCOUNT=true

export ACCOUNT_LOCAL=test-account-0
export ACCOUNT_TEST=happychain-test
export ACCOUNT_MAIN=happychain-main

export PASSFILE_LOCAL=.password.local
export PASSFILE_TEST=.password.test
export PASSFILE_MAIN=.password.main

# To use this: run
#   cast wallet import test-account-0 --interactive
# Then copy your key in, set a password (don't reuse), and save the password in .password.local.

####################################################################################################
# Ports
####################################################################################################

# Ports used for local development
export ANVIL_PORT=8545

####################################################################################################
# LayerZero
####################################################################################################

# TODO
OAPP_ADDRESS=0x...

# Address with permissions to configure/send
SIGNER=0xEe3aE13ed56E877874a6C5FBe7cdA7fc8573a7bE

### LayerZero Contract Addresses ###

# Find deployment addresses here:
# https://docs.layerzero.network/v2/deployments/deployed-contracts

# LayerZero V2 Endpoint contract
ENDPOINT_ADDRESS=0x6EDCE65403992e310A62460808c4b910D972f10f

# Library Configuration (SetLibraries.s.sol)

# SendUln302 address
SEND_LIB_ADDRESS=0xB31D2cb502E25B30C651842C7C3293c51Fe6d16f

# ReceiveUln302 address
RECEIVE_LIB_ADDRESS=0x9284fd59B95b9143AF0b9795CAC16eb3C723C9Ca

SRC_EID=40232 # Optimism Sepolia
DST_EID=40231 # Arbitrum Sepolia

# Grace period for library switch (0 for immediate)
GRACE_PERIOD=0

# Send Config (SetSendConfig.s.sol)
SOURCE_ENDPOINT_ADDRESS=0x6EDCE65403992e310A62460808c4b910D972f10f
SENDER_OAPP_ADDRESS=0x... # TODO
REMOTE_EID=40231 # Arbitrum Sepolia

# Peer Configuration (SetPeers.s.sol)
CHAIN1_EID=40232 # Optimism Sepolia
CHAIN1_PEER=0x... # TODO
CHAIN2_EID=40231 # Arbitrum Sepolia
CHAIN2_PEER=0x... # TODO
# etc
# CHAIN3_EID=30111
# CHAIN3_PEER=0x...

# Message to send cross-chain (SendMessage.s.sol)
MESSAGE="Hello World"